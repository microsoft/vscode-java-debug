{
    "java.debugger.launch.projectName.description": "调试器搜索类名时的首选工程。不同工程中可能存在重复的类名。当调试器在启动应用程序时查找指定的主类，此设置也有效。当使用表达式求值功能时，需要此配置项。",
    "java.debugger.launch.mainClass.description": "主类的全名（例如[java module name /] com.xyz.MainApp）或主类对应的java文件路径。",
    "java.debugger.launch.args.description": "启动应用程序的命令行参数。",
    "java.debugger.launch.vmArgs.description": "用于启动JVM的额外选项和系统属性（例如-Xms <size> -Xmx <size> -D <name> = <value>）。",
    "java.debugger.launch.modulePaths.description": "用于启动JVM的模块路径。如果未指定，调试器将自动从当前工程中解析。",
    "java.debugger.launch.modulePaths.auto": "自动从当前工程中解析模块路径。",
    "java.debugger.launch.modulePaths.runtime": "当前工程中属于 runtime 作用域的模块路径。",
    "java.debugger.launch.modulePaths.test": "当前工程中属于 test 作用域的模块路径。",
    "java.debugger.launch.modulePaths.exclude": "'!' 之后的路径将会从模块路径中去除。",
    "java.debugger.launch.classPaths.description": "用于启动JVM的类路径。如果未指定，调试器将自动从当前工程中解析。",
    "java.debugger.launch.classPaths.auto": "自动从当前工程中解析类路径。",
    "java.debugger.launch.classPaths.runtime": "当前工程中属于 runtime 作用域的类路径。",
    "java.debugger.launch.classPaths.test": "当前工程中属于 test 作用域的类路径。",
    "java.debugger.launch.classPaths.exclude": "'!' 之后的路径将会从类路径中去除。",
    "java.debugger.launch.sourcePaths.description": "应用程序的额外源代码目录。调试器默认从工程配置中查找源代码。此选项允许调试器在额外目录中查找源代码。",
    "java.debugger.launch.encoding.description": "JVM的file.encoding设置。可以在http://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html中找到可能的值。",
    "java.debugger.launch.cwd.description": "应用程序的工作目录。默认为当前工作空间根目录。",
    "java.debugger.launch.env.description": "启动应用程序时自定义的环境变量。",
    "java.debugger.launch.envFile.description": "环境变量文件绝对路径。",
    "java.debugger.launch.stopOnEntry.description": "启动后自动暂停应用程序。",
    "java.debugger.launch.internalConsole.description": "VS Code调试控制台（不支持输入流）。",
    "java.debugger.launch.integratedTerminal.description": "VS Code集成终端。",
    "java.debugger.launch.externalTerminal.description": "外部终端（可在用户设置中修改）。",
    "java.debugger.launch.console.description": "用于启动应用程序的控制台。",
    "java.debugger.launch.shortenCommandLine.auto": "自动检测命令行长度并决定是否通过适当的方法缩短命令行。",
    "java.debugger.launch.shortenCommandLine.none": "使用标准命令行 'java [options] classname [args]' 启动应用程序。",
    "java.debugger.launch.shortenCommandLine.jarmanifest": "将类路径参数生成到临时 classpath.jar 文件中，并使用命令行 'java -cp classpath.jar classname [args]' 启动应用程序。",
    "java.debugger.launch.shortenCommandLine.argfile": "将类路径参数生成到临时 argument 文件中, 并使用命令行 'java @argfile [args]' 启动应用程序。该值仅适用于 Java 9 及以上版本。",
    "java.debugger.launch.shortenCommandLine.description": "当项目具有较长的类路径或较大的VM参数时，启动程序的命令行可能会超出OS允许的最大命令行字符串限制。此配置项提供了多种缩短命令行的方法。",
    "java.debugger.launch.stepFilters.description": "Step时跳过指定的类或方法。",
    "java.debugger.launch.skipClasses.description": "Step时跳过指定的类。你可以使用内置变量，如'$JDK'和'$Libraries'来跳过一组类，或者添加一个特定的类名表达式，如java.*，*.Foo。",
    "java.debugger.launch.skipClasses.skipJDK": "跳过系统默认的启动路径中的JDK类，如rt.jar、jrt-fs.jar。",
    "java.debugger.launch.skipClasses.skipLibraries": "跳过应用库中的类，如Maven、Gradle依赖。",
    "java.debugger.launch.skipClasses.skipClassLoader": "跳过类加载器。",
    "java.debugger.launch.skipClasses.skipClassPattern": "跳过指定的类。仅支持全名，以及通配符，如java.*，*.Foo。",
    "java.debugger.launch.skipSynthetics.description": "Step时跳过合成方法。",
    "java.debugger.launch.skipStaticInitializers.description": "Step时跳过静态初始化方法。",
    "java.debugger.launch.skipConstructors.description": "Step时跳过构造函数。",
    "java.debugger.attach.hostName.description": "远程调试进程所在的主机名或IP地址。",
    "java.debugger.attach.port.description": "远程调试进程的调试端口。",
    "java.debugger.attach.processPicker.description": "使用进程选取器选择要附加的进程，或直接配置进程ID。",
    "java.debugger.attach.processId.description": "要附加到的本地进程的ID。",
    "java.debugger.attach.timeout.description": "重新连接前的超时值，以毫秒为单位（默认为30000ms）。",
    "java.debugger.attach.projectName.description": "调试器搜索类的首选工程。不同工程中可能存在重复的类名。",
    "java.debugger.snippet.launch.description": "启动java程序。",
    "java.debugger.snippet.launchInExternalTerminal.description": "在外部终端中启动java程序。",
    "java.debugger.snippet.launchCurrentFile.description": "启动当前java文件中的程序。",
    "java.debugger.snippet.launchWithArgumentsPrompt.description": "启动java程序时动态提示命令行参数。",
    "java.debugger.snippet.attach.description": "附加到正在运行的java程序。",
    "java.debugger.snippet.attachProcess.description": "使用进程选择器选择要附加的Java进程。",
    "java.debugger.snippet.attachRemote.description": "附加到远程java程序。",
    "java.debugger.configuration.title": "Java调试器",
    "java.debugger.configuration.logLevel.description": "Java调试器的日志级别。",
    "java.debugger.configuration.showHex.description": "在“变量”视图中以十六进制格式显示数值。",
    "java.debugger.configuration.showStaticVariables.description": "在“变量”视图中显示静态变量。",
    "java.debugger.configuration.showQualifiedNames.description": "在“变量”视图中显示类的全名。",
    "java.debugger.configuration.showLogicalStructure.description": "在“变量”视图中显示Collection和Map类的逻辑结构。",
    "java.debugger.configuration.showToString.description": "在“变量”视图中显示所有重载过'toString'方法的类的'toString()'值。",
    "java.debugger.configuration.maxStringLength.description": "设定“变量”或“调试控制台”视图中显示的字符串最大长度，长度超过部分将被剪掉。如果值为0，则不执行修剪。",
    "java.debugger.configuration.hotCodeReplace.description": "在调试期间重新加载已更改的Java类。",
    "java.debugger.configuration.enableRunDebugCodeLens.description": "在main方法上启用CodeLens标记。",
    "java.debugger.configuration.forceBuildBeforeLaunch": "在启动java程序之前强制编译整个工作空间。如果“java.autobuild.enabled”被禁掉，则会忽略该设置，在运行之前强制执行一次编译。",
    "java.debugger.configuration.console": "指定的控制台用于启动Java程序。如果要为特定的调试会话自定义控制台，请修改launch.json中的“console”配置。",
    "java.debugger.configuration.exceptionBreakpoint.skipClasses": "当发生异常时，跳过指定的类。你可以使用内置变量，如'$JDK'和'$Libraries'来跳过一组类，或者添加一个特定的类名表达式，如java.*，*.Foo。",
    "java.debugger.configuration.jdwp.limitOfVariablesPerJdwpRequest.description": "一次JDWP请求中可以请求的变量或字段的最大数量。该值越高，在展开变量视图时，请求debuggee的频率就越低。同时数量过大也会导致JDWP请求超时。",
    "java.debugger.configuration.jdwp.requestTimeout.description": "调试器与目标JVM通信时JDWP请求的超时时间（ms）。",
    "java.debugger.configuration.vmArgs.description": "启动Java程序的默认VM参数。例如，使用'-Xmx1G -ea'将堆大小增加到1GB并启用断言。如果要为特定的调试会话定制VM参数，请修改launch.json中的'vmArgs'配置。",
    "java.debugger.configuration.silentNotification": "控制是否可以使用通知来报告进度。如果为真，则使用状态栏来报告进度。",
    "java.debugger.configuration.jdwp.async.description": "实验性的：控制是否允许调试器以异步方式发送JDWP命令。异步模式可以提高高延迟网络上的远程调试响应速度。"
}