{
    "java.debugger.launch.projectName.description": "The preferred project in which the debugger searches for classes. There could be duplicated class names in different projects. This setting also works when the debugger looks for the specified main class when launching a program. It is required for expression evaluation.",
    "java.debugger.launch.mainClass.description": "The fully qualified class name (e.g. [java module name/]com.xyz.MainApp) or the java file path of the program entry.",
    "java.debugger.launch.javaExec.description": "The path to java executable to use. If unset project JDK's java executable is used.",
    "java.debugger.launch.args.description": "The command line arguments passed to the program.",
    "java.debugger.launch.vmArgs.description": "The extra options and system properties for the JVM (e.g. -Xms<size> -Xmx<size> -D<name>=<value>).",
    "java.debugger.launch.modulePaths.description": "The modulepaths for launching the JVM. If not specified, the debugger will automatically resolve from current project.",
    "java.debugger.launch.modulePaths.auto": "Automatically resolve the module paths of current project.",
    "java.debugger.launch.modulePaths.runtime": "The module paths within 'runtime' scope of current project.",
    "java.debugger.launch.modulePaths.test": "The module paths within 'test' scope of current project.",
    "java.debugger.launch.modulePaths.exclude": "The path after '!' will be excluded from the modulePaths.",
    "java.debugger.launch.classPaths.description": "The classpaths for launching the JVM. If not specified, the debugger will automatically resolve from current project.",
    "java.debugger.launch.classPaths.auto": "Automatically resolve the classpaths of current project.",
    "java.debugger.launch.classPaths.runtime": "The classpaths within 'runtime' scope of current project.",
    "java.debugger.launch.classPaths.test": "The classpaths within 'test' scope of current project.",
    "java.debugger.launch.classPaths.exclude": "The path after '!' will be excluded from the classpaths.",
    "java.debugger.launch.sourcePaths.description": "The extra source directories of the program. The debugger looks for source code from project settings by default. This option allows the debugger to look for source code in extra directories.",
    "java.debugger.launch.encoding.description": "The file.encoding setting for the JVM. Possible values can be found in https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html.",
    "java.debugger.launch.cwd.description": "The working directory of the program. Defaults to the current workspace root.",
    "java.debugger.launch.env.description": "The extra environment variables for the program.",
    "java.debugger.launch.envFile.description": "Absolute path to a file containing environment variable definitions.",
    "java.debugger.launch.stopOnEntry.description": "Automatically pause the program after launching.",
    "java.debugger.launch.internalConsole.description": "VS Code debug console (input stream not supported).",
    "java.debugger.launch.integratedTerminal.description": "VS Code integrated terminal.",
    "java.debugger.launch.externalTerminal.description": "External terminal that can be configured in user settings.",
    "java.debugger.launch.console.description": "The specified console to launch the program.",
    "java.debugger.launch.shortenCommandLine.auto": "Automatically detect the command line length and determine whether to shorten the command line via an appropriate approach.",
    "java.debugger.launch.shortenCommandLine.none": "Launch the program with the standard command line 'java [options] classname [args]'.",
    "java.debugger.launch.shortenCommandLine.jarmanifest": "Generate the classpath parameters to a temporary classpath.jar file, and launch the program with the command line 'java -cp classpath.jar classname [args]'.",
    "java.debugger.launch.shortenCommandLine.argfile": "Generate the classpath parameters to a temporary argument file, and launch the program with the command line 'java @argfile [args]'. This value only applies to Java 9 and higher.",
    "java.debugger.launch.shortenCommandLine.description": "When the project has long classpath or big VM arguments, the command line to launch the program may exceed the maximum command line string limitation allowed by the OS. This configuration item provides multiple approaches to shorten the command line.",
    "java.debugger.launch.stepFilters.description": "Skip specified classes or methods when stepping.",
    "java.debugger.launch.skipClasses.description": "Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo",
    "java.debugger.launch.skipClasses.skipJDK": "Skip the JDK classes from the default system bootstrap classpath, such as rt.jar, jrt-fs.jar.",
    "java.debugger.launch.skipClasses.skipLibraries": "Skip the classes from application libraries, such as Maven, Gradle dependencies.",
    "java.debugger.launch.skipClasses.skipClassLoader": "Skip the class loaders.",
    "java.debugger.launch.skipClasses.skipClassPattern": "Skip the specified classes. Class names should be fully qualified. Wildcard is supported, e.g. java.*, *.Foo",
    "java.debugger.launch.skipSynthetics.description": "Skip synthetic methods when stepping.",
    "java.debugger.launch.skipStaticInitializers.description": "Skip static initializer methods when stepping.",
    "java.debugger.launch.skipConstructors.description": "Skip constructor methods when stepping.",
    "java.debugger.attach.hostName.description": "The host name or ip address of remote debuggee.",
    "java.debugger.attach.port.description": "The debug port of remote debuggee.",
    "java.debugger.attach.processPicker.description": "Use process picker to select a process to attach, or Process ID as integer.",
    "java.debugger.attach.processId.description": "ID of the local process to attach to.",
    "java.debugger.attach.timeout.description": "Timeout value before reconnecting, in milliseconds (default to 30000ms).",
    "java.debugger.attach.projectName.description": "The preferred project in which the debugger searches for classes. There could be duplicated class names in different projects.",
    "java.debugger.snippet.launch.description": "Add a new configuration for launching a java program.",
    "java.debugger.snippet.launchInExternalTerminal.description": "Add a new configuration for launching a java program in the external terminal.",
    "java.debugger.snippet.launchCurrentFile.description": "Add a new configuration for launching current java file.",
    "java.debugger.snippet.launchWithArgumentsPrompt.description": "Add a new configuration for launching a java program with arguments prompt.",
    "java.debugger.snippet.attach.description": "Add a new configuration for attaching to a running java program.",
    "java.debugger.snippet.attachProcess.description": "Use process picker to select a Java process to attach to.",
    "java.debugger.snippet.attachRemote.description": "Add a new configuration for attaching to a remote java program.",
    "java.debugger.configuration.title": "Java Debugger",
    "java.debugger.configuration.logLevel.description": "Minimum level of debugger logs that are sent to VS Code.",
    "java.debugger.configuration.showHex.description": "Show numbers in hex format in \"Variables\" viewlet.",
    "java.debugger.configuration.showStaticVariables.description": "Show static variables in \"Variables\" viewlet.",
    "java.debugger.configuration.showQualifiedNames.description": "Show fully qualified class names in \"Variables\" viewlet.",
    "java.debugger.configuration.showLogicalStructure.description": "Show the logical structure for the Collection and Map classes in \"Variables\" viewlet.",
    "java.debugger.configuration.showToString.description": "Show 'toString()' value for all classes that override 'toString' method in \"Variables\" viewlet.",
    "java.debugger.configuration.maxStringLength.description": "The maximum length of strings displayed in \"Variables\" or \"Debug Console\" viewlet, strings longer than this length will be trimmed, if 0 no trim is performed.",
    "java.debugger.configuration.numericPrecision.description": "The precision when formatting doubles in \"Variables\" or \"Debug Console\" viewlet.",
    "java.debugger.configuration.hotCodeReplace.description": "Reload the changed Java classes during debugging.",
    "java.debugger.configuration.enableRunDebugCodeLens.description": "Enable the run and debug code lens providers over main methods.",
    "java.debugger.configuration.forceBuildBeforeLaunch": "Force building the workspace before launching java program. If 'java.autobuild.enabled' is disabled, this setting will be ignored and still force a build job before launching.",
    "java.debugger.configuration.onBuildFailureProceed": "Force to proceed when build fails",
    "java.debugger.configuration.console": "The specified console to launch Java program. If you want to customize the console for a specific debug session, please modify the 'console' config in launch.json.",
    "java.debugger.configuration.exceptionBreakpoint.exceptionTypes": "Specifies a set of exception types you want to break on, e.g. java.lang.NullPointerException. A specific exception type and its subclasses can be selected for caught exceptions, uncaught exceptions, or both can be selected.",
    "java.debugger.configuration.exceptionBreakpoint.allowClasses": "Specifies the allowed locations where the exception breakpoint can break on. Wildcard is supported, e.g. java.*, *.Foo",
    "java.debugger.configuration.exceptionBreakpoint.skipClasses": "Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo",
    "java.debugger.configuration.jdwp.limitOfVariablesPerJdwpRequest.description": "The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout.",
    "java.debugger.configuration.jdwp.requestTimeout.description": "The timeout (ms) of JDWP request when the debugger communicates with the target JVM.",
    "java.debugger.configuration.vmArgs.description": "The default VM arguments to launch the Java program. Eg. Use '-Xmx1G -ea' to increase the heap size to 1GB and enable assertions. If you want to customize the VM arguments for a specific debug session, please modify the 'vmArgs' config in launch.json.",
    "java.debugger.configuration.silentNotification": "Controls whether notifications can be used to report progress. If true, use status bar to report progress instead.",
    "java.debugger.configuration.jdwp.async.description": "Experimental: Controls whether the debugger is allowed to send JDWP commands asynchronously. Async mode can improve remote debugging response speed on high-latency networks.",
    "java.debugger.configuration.debugSupportOnDecompiledSource.description": "[Experimental]: Enable debugging support on the decompiled source code. Be aware that this feature may affect the loading speed of Call Stack Viewlet."
}
