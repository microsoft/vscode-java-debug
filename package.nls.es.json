{
    "java.debugger.launch.projectName.description": "El proyecto preferido en el que el depurador busca clases. Podría haber nombres de clases duplicados en diferentes proyectos. Esta configuración también funciona cuando el depurador busca la clase principal especificada al lanzar un programa. Es necesario para la evaluación de la expresión.",
    "java.debugger.launch.mainClass.description": "El nombre de la clase totalmente cualificado (por ejemplo, [nombre del módulo de java/]com.xyz.MainApp) o la ruta del archivo Java de la entrada del programa.",
    "java.debugger.launch.args.description": "Los argumentos de la línea de comandos pasados al programa.",
    "java.debugger.launch.vmArgs.description": "Las opciones extra y las propiedades del sistema para la JVM (por ejemplo -Xms<tamaño> -Xmx<tamaño> -D<nombre>=<valor>).",
    "java.debugger.launch.modulePaths.description": "Los modulepaths para el lanzamiento de la JVM.  Si no se especifica, el depurador se resolverá automáticamente a partir del proyecto actual.",
    "java.debugger.launch.classPaths.description": "Los classpath para el lanzamiento de la JVM. Si no se especifica, el depurador se resolverá automáticamente a partir del proyecto actual.",
    "java.debugger.launch.sourcePaths.description": "Los directorios de fuentes extras del programa. El depurador busca el código fuente de los ajustes del proyecto por defecto. Esta opción permite al depurador buscar el código fuente en directorios extra.",
    "java.debugger.launch.encoding.description": "La configuración de codificación de archivos para la JVM. Los posibles valores se pueden encontrar en https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html.",
    "java.debugger.launch.cwd.description": "El directorio de trabajo del programa. Por defecto es la raíz del área de trabajo actual.",
    "java.debugger.launch.env.description": "Las variables de entorno adicionales para el programa.",
    "java.debugger.launch.stopOnEntry.description": "Pausar automáticamente el programa después del lanzamiento.",
    "java.debugger.launch.internalConsole.description": "Consola de Depuración de VS Code (flujo de entrada no soportado).",
    "java.debugger.launch.integratedTerminal.description": "Terminal integrado de VS Code.",
    "java.debugger.launch.externalTerminal.description": "Terminal externo que puede ser configurado en la configuración del usuario.",
    "java.debugger.launch.console.description": "La consola establecida para iniciar el programa.",
    "java.debugger.launch.shortenCommandLine.auto": "Detectar automáticamente la longitud de la línea de comando y determinar si acortar la línea de comando mediante un enfoque apropiado.",
    "java.debugger.launch.shortenCommandLine.none": "Lanza el programa con la línea de comandos estándar 'java [opciones] nombredeclase [args]'.",
    "java.debugger.launch.shortenCommandLine.jarmanifest": "Generar los parámetros de classpath a un archivo temporal classpath.jar, y lanzar el programa con la línea de comandos 'java -cp classpath.jar nombre de clase [args]'.",
    "java.debugger.launch.shortenCommandLine.argfile": "Generar los parámetros de classpath en un archivo de argumentos temporal, y lanzar el programa con la línea de comandos 'java @argfile [args]'. Este valor sólo se aplica a Java 9 y superiores.",
    "java.debugger.launch.shortenCommandLine.description": "Cuando el proyecto tiene classpath largos o argumentos de la VM grandes, la línea de comandos para lanzar el programa puede exceder el límite máximo de string en la consola permitido por el SO. Este elemento de configuración proporciona múltiples enfoques para acortar la línea de comandos.",
    "java.debugger.launch.stepFilters.description": "Omitir clases o métodos especificados al avanzar pasos.",
    "java.debugger.launch.skipClasses.description": "Omitir las clases especificadas al avanzar pasos. Puedes usar las variables incorporadas como '$JDK' y '$Libraries' para omitir un grupo de clases, o añadir una expresión específica de nombre de clase, por ejemplo, java.*, *.Pepe",
    "java.debugger.launch.skipClasses.skipJDK": "Omitir las clases del JDK del classpath del sistema predeterminado, como rt.jar, jrt-fs.jar.",
    "java.debugger.launch.skipClasses.skipLibraries": "Omite las clases de las bibliotecas de aplicaciones, como las dependencias de Maven y Gradle.",
    "java.debugger.launch.skipClasses.skipClassLoader": "Omitir los cargadores de clase.",
    "java.debugger.launch.skipClasses.skipClassPattern": "Omitir las clases especificadas. Los nombres de las clases deben estar completamente calificados. Se admite el uso de comodines, por ejemplo, java.*, *.Pepe",
    "java.debugger.launch.skipSynthetics.description": "Omitir los métodos sintéticos al avanzar pasos.",
    "java.debugger.launch.skipStaticInitializers.description": "Omitir los métodos de inicialización static al avanzar pasos.",
    "java.debugger.launch.skipConstructors.description": "Omitir los métodos constructores al avanzar pasos.",
    "java.debugger.attach.hostName.description": "El nombre del host o la dirección ip del depurador remoto.",
    "java.debugger.attach.port.description": "El puerto de depuración del depurador remoto.",
    "java.debugger.attach.processPicker.description": "Utilice el selector de procesos para seleccionar un proceso al que acoplarse, o el ID del proceso como un número entero.",
    "java.debugger.attach.processId.description": "ID del proceso local al que acoplarse.",
    "java.debugger.attach.timeout.description": "Límite de tiempo de espera antes de reconectarse, en milisegundos (por defecto a 30000ms).",
    "java.debugger.attach.projectName.description": "El proyecto preferido en el que el depurador busca clases. Podría haber nombres de clases duplicados en diferentes proyectos.",
    "java.debugger.snippet.launch.description": "Añade una nueva configuración para lanzar un programa Java.",
    "java.debugger.snippet.launchInExternalTerminal.description": "Añade una nueva configuración para lanzar un programa Java en la terminal externa.",
    "java.debugger.snippet.launchCurrentFile.description": "Añade una nueva configuración para lanzar el archivo Java actual.",
    "java.debugger.snippet.launchWithArgumentsPrompt.description": "Añade una nueva configuración para lanzar un programa Java con argumentos.",
    "java.debugger.snippet.attach.description": "Añade una nueva configuración para acoplarse a un programa Java en ejecución.",
    "java.debugger.snippet.attachProcess.description": "Utilice el selector de procesos para seleccionar un proceso Java al que acoplarse.",
    "java.debugger.snippet.attachRemote.description": "Añade una nueva configuración para acoplarse a un programa Java remoto.",
    "java.debugger.configuration.title": "Depurador de Java",
    "java.debugger.configuration.logLevel.description": "Nivel mínimo de registros de depuración que se envían a VS Code.",
    "java.debugger.configuration.showHex.description": "Mostrar los números en formato hexadecimal en la vista \"Variables\".",
    "java.debugger.configuration.showStaticVariables.description": "Muestra las variables estáticas en la vista \"Variables\".",
    "java.debugger.configuration.showQualifiedNames.description": "Mostrar los nombres de las clases totalmente cualificados en la vista de \"Variables\".",
    "java.debugger.configuration.showLogicalStructure.description": "Mostrar la estructura lógica de las clases Collection y Map en la vista de \"Variables\".",
    "java.debugger.configuration.showToString.description": "Mostrar el valor 'toString()' en la vista \"Variables\" para todas las clases que sobrescriban el método 'toString'.",
    "java.debugger.configuration.maxStringLength.description": "La longitud máxima de los strings mostrados en la vista \"Variables\" o \"Consola de Depuración\", los strings más largos que esta longitud serán recortados, si es 0 no se realiza recorte.",
    "java.debugger.configuration.numericPrecision.description": "La precisión en el formato de números reales en la vista \"Variables\" o \"Consola de Depuración\".",
    "java.debugger.configuration.hotCodeReplace.description": "Recargar las clases de Java modificadas durante la depuración. Asegúrate de que 'java.autobuild.enabled' no esté desactivado.",
    "java.debugger.configuration.enableRunDebugCodeLens.description": "Habilitar proveedores de CodeLens para la ejecución y depuración sobre los métodos principales.",
    "java.debugger.configuration.forceBuildBeforeLaunch": "Forzar la compilación del área de trabajo antes de lanzar el programa Java.",
    "java.debugger.configuration.onBuildFailureProceed": "Forzar continuar cuando falla la compilación.",
    "java.debugger.configuration.console": "La consola establecida para lanzar el programa Java. Si quieres personalizar la consola para una sesión de depuración específica, por favor modifica la configuración de la 'console' en launch.json.",
    "java.debugger.configuration.exceptionBreakpoint.skipClasses": "Omitir las clases especificadas al parar por una excepción. Puedes usar las variables incorporadas como '$JDK' y '$Libraries' para omitir un grupo de clases, o añadir una expresión específica de nombre de clase, por ejemplo, java.*, *.Pepe",
    "java.debugger.configuration.jdwp.limitOfVariablesPerJdwpRequest.description": "El máximo número de variables o campos que pueden ser solicitados en una solicitud de JDWP. Cuanto más alto sea el valor, menos frecuentemente se solicitará la depuración al expandir la vista de la variable. Además, un número grande puede causar un límite de tiempo de espera de la solicitud JDWP.",
    "java.debugger.configuration.jdwp.requestTimeout.description": "El límite de tiempo (ms) de la solicitud de JDWP cuando el depurador se comunica con el JVM objetivo.",
    "java.debugger.configuration.vmArgs.description": "Los argumentos por defecto de la VM para lanzar el programa Java. Por ejemplo, usa '-Xmx1G -ea' para aumentar el tamaño de la pila a 1GB y habilitar los asertos. Si quieres personalizar los argumentos de la máquina virtual para una sesión de depuración específica, modifica la configuración de 'vmArgs' en launch.json."
}