{
    "java.debugger.launch.projectName.description": "偵錯器搜索類別名時的偏好專案。不同專案中可能存在重復的類別名。當偵錯器在啟動應用程式時查找指定的主類別，此設定也有效。當使用表達式求值功能時，需要此選項。",
    "java.debugger.launch.mainClass.description": "主類別的全名（例如 [java module name /] com.xyz.MainApp）或主類別對應的 Java 檔案路徑。",
    "java.debugger.launch.args.description": "啟動應用程式的命令列參數。",
    "java.debugger.launch.vmArgs.description": "用於啟動 JVM 的額外選項和系統屬性（例如-Xms <size> -Xmx <size> -D <name> = <value>）。",
    "java.debugger.launch.modulePaths.description": "用於啟動 JVM 的模組路徑。如果未指定，偵錯器將自動從當前專案中解析。",
    "java.debugger.launch.modulePaths.auto": "自動從當前專案中解析模組路徑。",
    "java.debugger.launch.modulePaths.runtime": "當前專案中屬於 runtime 範圍的模組路徑。",
    "java.debugger.launch.modulePaths.test": "當前專案中屬於 test 範圍的模組路徑。",
    "java.debugger.launch.modulePaths.exclude": "'!' 之後的路徑將會從模組路徑中去除。",
    "java.debugger.launch.classPaths.description": "用於啟動 JVM 的類別路徑。如果未指定，偵錯器將自動從當前專案中解析。",
    "java.debugger.launch.classPaths.auto": "自動從當前專案中解析類別路徑。",
    "java.debugger.launch.classPaths.runtime": "當前專案中屬於 runtime 範圍的類別路徑。",
    "java.debugger.launch.classPaths.test": "當前專案中屬於 test 範圍的類別路徑。",
    "java.debugger.launch.classPaths.exclude": "'!' 之後的路徑將會從類別路徑中去除。",
    "java.debugger.launch.sourcePaths.description": "應用程式的額外原始碼目錄。偵錯器預設從專案設定中查找原始碼。此選項允許偵錯器在額外目錄中查找原始碼。",
    "java.debugger.launch.encoding.description": "JVM 的 file.encoding 設定。可以在 http://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html 中找到可能的值。",
    "java.debugger.launch.cwd.description": "應用程式的工作目錄。預設為當前工作空間根目錄。",
    "java.debugger.launch.env.description": "啟動應用程式時自定義的環境變數。",
    "java.debugger.launch.envFile.description": "環境變數檔案絕對路徑。",
    "java.debugger.launch.stopOnEntry.description": "啟動後自動暫停應用程式。",
    "java.debugger.launch.internalConsole.description": "VS Code 偵錯主控台（不支援輸入串流）。",
    "java.debugger.launch.integratedTerminal.description": "VS Code 整合終端。",
    "java.debugger.launch.externalTerminal.description": "外部終端（可在用戶設定中修改）。",
    "java.debugger.launch.console.description": "用於啟動應用程式的主控台。",
    "java.debugger.launch.shortenCommandLine.auto": "自動檢測命令列長度並決定是否通過適當的方法縮短命令列。",
    "java.debugger.launch.shortenCommandLine.none": "使用標準命令列 'java [options] classname [args]' 啟動應用程式。",
    "java.debugger.launch.shortenCommandLine.jarmanifest": "將類別路徑參數生成到臨時 classpath.jar 檔案中，並使用命令列 'java -cp classpath.jar classname [args]' 啟動應用程式。",
    "java.debugger.launch.shortenCommandLine.argfile": "將類別路徑參數生成到臨時 argument 檔案中, 並使用命令列 'java @argfile [args]' 啟動應用程式。該值僅適用於 Java 9 及以上版本。",
    "java.debugger.launch.shortenCommandLine.description": "當項目具有較長的類別路徑或較大的 VM 參數時，啟動程式的命令列可能會超出OS允許的最大命令列字元串限制。此選項提供了多種縮短命令列的方法。",
    "java.debugger.launch.stepFilters.description": "Step 時跳過指定的類別或方法。",
    "java.debugger.launch.skipClasses.description": "Step 時跳過指定的類別。你可以使用內建變數，如 '$JDK' 和 '$Libraries' 來跳過一組類別，或者添加一個特定的類別名表達式，如 java.*，*.Foo。",
    "java.debugger.launch.skipClasses.skipJDK": "跳過系統預設的啟動路徑中的 JDK 類別，如 rt.jar、jrt-fs.jar。",
    "java.debugger.launch.skipClasses.skipLibraries": "跳過應用程式庫中的類別，如 Maven、Gradle 相依性。",
    "java.debugger.launch.skipClasses.skipClassLoader": "跳過類別載入器。",
    "java.debugger.launch.skipClasses.skipClassPattern": "跳過指定的類別。僅支援全名，以及萬用字元，如 java.*，*.Foo。",
    "java.debugger.launch.skipSynthetics.description": "Step 時跳過合成方法。",
    "java.debugger.launch.skipStaticInitializers.description": "Step 時跳過靜態初始化方法。",
    "java.debugger.launch.skipConstructors.description": "Step 時跳過建構函數。",
    "java.debugger.attach.hostName.description": "遠端偵錯程序所在的主機名或 IP 地址。",
    "java.debugger.attach.port.description": "遠端偵錯程序的偵錯埠。",
    "java.debugger.attach.processPicker.description": "使用程序選取器選擇要附加的程序，或直接設定程序 ID。",
    "java.debugger.attach.processId.description": "要附加到的本地程序的 ID。",
    "java.debugger.attach.timeout.description": "重新連接前的超時值，以毫秒為單位（預設為 30000ms）。",
    "java.debugger.attach.projectName.description": "偵錯器搜索類別的偏好專案。不同專案中可能存在重復的類別名。",
    "java.debugger.snippet.launch.description": "啟動 Java 程式。",
    "java.debugger.snippet.launchInExternalTerminal.description": "在外部終端中啟動 Java 程式。",
    "java.debugger.snippet.launchCurrentFile.description": "啟動當前 Java 檔案中的程式。",
    "java.debugger.snippet.launchWithArgumentsPrompt.description": "啟動 Java 程式時動態提示命令列參數。",
    "java.debugger.snippet.attach.description": "附加到正在運行的 Java 程式。",
    "java.debugger.snippet.attachProcess.description": "使用程序選擇器選擇要附加的 Java 程序。",
    "java.debugger.snippet.attachRemote.description": "附加到遠端 Java 程式。",
    "java.debugger.configuration.title": "Java 偵錯器",
    "java.debugger.configuration.logLevel.description": "Java 偵錯器的記錄級別。",
    "java.debugger.configuration.showHex.description": "在「變數」視圖中以十六進位格式顯示數值。",
    "java.debugger.configuration.showStaticVariables.description": "在「變數」視圖中顯示靜態變數。",
    "java.debugger.configuration.showQualifiedNames.description": "在「變數」視圖中顯示類別的全名。",
    "java.debugger.configuration.showLogicalStructure.description": "在「變數」視圖中顯示 Collection 和 Map 類別的邏輯結構。",
    "java.debugger.configuration.showToString.description": "在「變數」視圖中顯示所有覆寫過 'toString' 方法的類別的 'toString()' 值。",
    "java.debugger.configuration.maxStringLength.description": "設定「變數」或「偵錯主控台」視圖中顯示的字元串最大長度，長度超過部分將被剪掉。如果值為0，則不執行修剪。",
    "java.debugger.configuration.hotCodeReplace.description": "在偵錯期間重新載入已更改的 Java 類別。確保未停用 'java.autobuild.enabled'。",
    "java.debugger.configuration.enableRunDebugCodeLens.description": "在 main 方法上啟用 CodeLens 標記。",
    "java.debugger.configuration.forceBuildBeforeLaunch": "在啟動 Java 程式之前強制編譯整個工作空間。",
    "java.debugger.configuration.console": "指定用於啟動 Java 程式的主控台。如果要為特定的偵錯會話自訂義主控台，請修改 launch.json 中的「console」設定。",
    "java.debugger.configuration.exceptionBreakpoint.skipClasses": "當發生異常時，跳過指定的類別。你可以使用內建變數，如 '$JDK' 和 '$Libraries' 來跳過一組類別，或者添加一個特定的類別名表達式，如 java.*，*.Foo。",
    "java.debugger.configuration.jdwp.limitOfVariablesPerJdwpRequest.description": "一次 JDWP 請求中可以請求的變數或欄位的最大數量。該值越高，在展開變數視圖時，請求偵錯對象的頻率就越低。同時數量過大也會導致 JDWP 請求超時。",
    "java.debugger.configuration.jdwp.requestTimeout.description": "偵錯器與目標 JVM 連線時 JDWP 請求的超時時間（ms）。",
    "java.debugger.configuration.vmArgs.description": "啟動 Java 程式的預設 VM 參數。例如，使用 '-Xmx1G -ea' 將堆大小增加到 1GB 並啟用斷言。如果要為特定的偵錯會話定製 VM 參數，請修改launch.json 中的 'vmArgs' 設定。",
    "java.debugger.configuration.silentNotification": "控制是否可以使用通知來回報進度。如果為真，則使用狀態欄來回報進度。"
}